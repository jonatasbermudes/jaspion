-- Este script é para PostgreSQL, compatível com Supabase.
-- As tabelas são criadas na ordem de dependência.

-- 1. Tabela de Usuários
-- Armazena os dados de login dos usuários.
CREATE TABLE IF NOT EXISTS usuarios (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR(255) NOT NULL UNIQUE,
    senha VARCHAR(255) NOT NULL -- Armazenar o hash (ex: BCrypt)
);

-- 2. Tabela de Bots do Telegram
-- Armazena os bots que o usuário cadastrou.
CREATE TABLE IF NOT EXISTS bots_telegram (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    usuario_id BIGINT NOT NULL,
    nome VARCHAR(255) NOT NULL,
    token_api VARCHAR(1024) NOT NULL, -- O token será criptografado pela aplicação antes de salvar

    CONSTRAINT fk_usuario
        FOREIGN KEY(usuario_id) 
        REFERENCES usuarios(id)
        ON DELETE CASCADE
);

-- 3. Tabela de Destinos do Telegram
-- Armazena os canais/grupos para onde as mensagens serão enviadas.
CREATE TABLE IF NOT EXISTS destinos_telegram (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    usuario_id BIGINT NOT NULL,
    nome VARCHAR(255) NOT NULL,
    chat_id VARCHAR(255) NOT NULL, -- ex: "@meucanal" ou "-10012345"

    CONSTRAINT fk_usuario
        FOREIGN KEY(usuario_id) 
        REFERENCES usuarios(id)
        ON DELETE CASCADE
);

-- 4. Tabela de Conexões de Webhook
-- A tabela principal que une um Bot, um Destino e gera a URL do webhook.
CREATE TABLE IF NOT EXISTS conexoes_webhook (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- ID público na URL
    usuario_id BIGINT NOT NULL,
    bot_id BIGINT NOT NULL,
    destino_id BIGINT NOT NULL,
    nome VARCHAR(255) NOT NULL,
    ativo BOOLEAN NOT NULL DEFAULT TRUE,
    template_mensagem VARCHAR(2048), -- Opcional

    CONSTRAINT fk_usuario
        FOREIGN KEY(usuario_id) 
        REFERENCES usuarios(id)
        ON DELETE CASCADE,
    CONSTRAINT fk_bot
        FOREIGN KEY(bot_id) 
        REFERENCES bots_telegram(id)
        ON DELETE CASCADE, -- Se o bot for deletado, a conexão também é.
    CONSTRAINT fk_destino
        FOREIGN KEY(destino_id) 
        REFERENCES destinos_telegram(id)
        ON DELETE CASCADE -- Se o destino for deletado, a conexão também é.
);

-- 5. Tabela de Logs de Execução
-- Armazena um histórico das chamadas de webhook para depuração.
CREATE TABLE IF NOT EXISTS logs_execucao (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    conexao_id UUID NOT NULL,
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(), -- Timestamp com fuso horário
    sucesso BOOLEAN NOT NULL,
    body_recebido TEXT, -- TEXT para JSON/corpo longo
    resposta_telegram TEXT, -- Opcional, para logs de erro

    CONSTRAINT fk_conexao
        FOREIGN KEY(conexao_id) 
        REFERENCES conexoes_webhook(id)
        ON DELETE CASCADE -- Se a conexão for deletada, os logs também são.
);

-- --- ÍNDICES ---
-- Adiciona índices nas chaves estrangeiras para otimizar as consultas (JOINs).

CREATE INDEX IF NOT EXISTS idx_bots_usuario_id ON bots_telegram(usuario_id);
CREATE INDEX IF NOT EXISTS idx_destinos_usuario_id ON destinos_telegram(usuario_id);
CREATE INDEX IF NOT EXISTS idx_conexoes_usuario_id ON conexoes_webhook(usuario_id);
CREATE INDEX IF NOT EXISTS idx_conexoes_bot_id ON conexoes_webhook(bot_id);
CREATE INDEX IF NOT EXISTS idx_conexoes_destino_id ON conexoes_webhook(destino_id);
CREATE INDEX IF NOT EXISTS idx_logs_conexao_id ON logs_execucao(conexao_id);
CREATE INDEX IF NOT EXISTS idx_logs_timestamp ON logs_execucao(timestamp DESC); -- Otimiza a busca por "últimos logs"
